>> instead of hitting database for each account to compute its balance, hit
database once to get all transactions and loop through them

>> using tree view, clicking on it refreshes right hand transaction side

>> save short list of commonly accessed accounts

>> import transactions?

>> use account.id instead of short name to match accounts

>> in transactions page, show accounts as part of full tree hierarchy:
Assets > Bradesco > Conta corrente (pre-compute this value and save as
TreeName, update when accounts get renamed)

>> link account owner to Django user
from django.contrib.auth.models import User
owner = models.ForeignKey(User)

>> save balance as part of model, propagate changes when transactions are
added. It looks like re-computing balances every time is too slow
Balances will change on adding, editing, and deleting transactions

>> add tags to transactions, with many-to-many fields. Can be used to mark
people's names

>> remove html from views.py

>> create module for transactions and accounts outside views.py

>> use tablesorter

>> save "global" time window in session or url so that clicking on different
links looks only at transactions in this time window (e.g. this month)

>> create functions that retrieve transactions matching account name and
dates. 

>> use TEMPLATE_CONTEXT_PROCESSORS to eliminate passing all account ahort
names in creating header

see: http://stackoverflow.com/questions/3221592/how-to-pass-common-dictionary-data-to-every-page-in-django

How to pass common dictionary data to every page in django

I have a common data {the logged-in user's message number) to display on every page. I can simply pass to template as

dict={'messagenumber':5}
return render_to_response('template.html',dict,context_instance=RequestContext(request))
But it looks tedious if i have this dict data pass to very page. Is there an easier way to pass common data to every page?

ANSWER:

settings.py

TEMPLATE_CONTEXT_PROCESSORS = ("django.contrib.auth.context_processors.auth",
"django.core.context_processors.debug",
"django.core.context_processors.i18n",
"django.core.context_processors.media",
"django.core.context_processors.static",
"django.contrib.messages.context_processors.messages",
"home.context_processor.remote_ip")
in home application, create a python file called context_processor.py

in the context_processor.py add a function like this:

def remote_ip(request):
  return {'remote_ip': request.META['REMOTE_ADDR']}
use it in the templates like {{ remote_ip }}

